%{
    #include <string>
    #include <stdio.h>
    #include <iostream>
    #include <fstream>
    #include "classes/var_map.h"
    #include "classes/variable.h"
    #include "classes/code_generator.h"

    extern FILE *yyin;
    
    var_map* var_map_instance;

    code_generator* code_generator_instance;

    // std::string code = "";

    int yylex(void);
    void yyerror(std::string error);
%}

%union {
    uint64_t num;
    std::string* str;
    Var* variable;
    Condition cond;
    IfElseParam ifElse;
    ProcedureStruct procedureParam;
}

%start program_all

%token PROGRAM IS VAR _BEGIN END
%token LBRACKET RBRACKET
%token READ WRITE
%token <ifElse> IF
%token THEN ELSE ENDIF
%token WHILE DO ENDWHILE
%token ASSIGN
%token COMMA
%token <num> REPEAT
%token UNTIL
%token INVALIDCHAR
%token SEMICOLON
%token PROCEDURE

%token EQ NE LT GT LE GE

%left PLUS MINUS MUL DIV MODULO

%token <num> INT
%token <str> PIDENTIFIER

%type <variable> identifier value
%type <str> expression
%type <cond> condition
%type <num> procedures
%type <procedureParam> proc_head

%%

program_all: 
    procedures          { code_generator_instance->finishProceduresDeclaration($1); }  
    main                { code_generator_instance->endGenerateCode(); }
;

procedures:
    procedures PROCEDURE         
    proc_head IS VAR            { var_map_instance->stopCreatingParameters(); }
    declarations                { code_generator_instance->finishProcedureDeclaration(); }
    _BEGIN commands END         { code_generator_instance->finishProcedure(); $$ = code_generator_instance->getK(); }
    | procedures PROCEDURE proc_head IS _BEGIN commands END                      { $$ = code_generator_instance->getK(); }
    |                                                                           { $$ = code_generator_instance->getK(); }
;

main:
    PROGRAM IS VAR { var_map_instance->stopCreatingParameters();}
    declarations _BEGIN { var_map_instance->startCallingArguments(); }
    commands END
    | PROGRAM IS _BEGIN commands END
;

commands: 
    commands command                        
    | command
;

command: 
    identifier ASSIGN expression SEMICOLON                  { code_generator_instance->assignValue($1); }
    |   IF condition THEN commands                            { $1 = code_generator_instance->flowControl()->ifElseFirst($2); }
        ELSE commands ENDIF                                     { code_generator_instance->flowControl()->ifElseSecond($1); }
    |   IF condition THEN commands ENDIF                      { code_generator_instance->flowControl()->singleIf($2); }
    |   WHILE condition DO commands ENDWHILE            { code_generator_instance->flowControl()->whileLoop($2); }
    |   REPEAT                                                { $1 = code_generator_instance->flowControl()->repeatUntil_Start(); }
        commands UNTIL condition SEMICOLON                      { code_generator_instance->flowControl()->repeatUntil_End($5, $1); }                   
    |   proc_head                                                       { code_generator_instance->jumpToStartProcedure(); }
    |   READ identifier SEMICOLON                                       { code_generator_instance->readVariable($2); }   
    |   WRITE value SEMICOLON                                           { code_generator_instance->writeVariable($2); }
    |   expression                       
;

proc_head:
    PIDENTIFIER                                 { std::cout << "Calling proc_head " << *$1 << std::endl; var_map_instance->callProcedure(*$1); } 
    LBRACKET declarations RBRACKET          { std::cout << "End of calling proc_head\n"; var_map_instance->stopCallingArguments(); std::cout << "End of calling proc_head 2\n"; }                          
;

declarations:
    declarations COMMA declaration       
    | declaration       
    |                
;

declaration:
    PIDENTIFIER                         { var_map_instance->setVariable(*$1); }
;

expression:
    value { code_generator_instance->loadVar($1); }
    | value PLUS value { code_generator_instance->doOperation()->add($1, $3); }
    | value MINUS value { code_generator_instance->doOperation()->sub($1, $3); }
    | value MUL value { code_generator_instance->doOperation()->mul($1, $3); }
    | value DIV value { code_generator_instance->doOperation()->div($1, $3); }
    | value MODULO value { code_generator_instance->doOperation()->mod($1, $3);}
;

condition:
    value EQ value                                  { $$ = code_generator_instance->makeCondition()->equal($1, $3); }
|   value NE value                                  { $$ = code_generator_instance->makeCondition()->notEqual($1, $3); }
|   value LT value                                  { $$ = code_generator_instance->makeCondition()->less($1, $3); }
|   value GT value                                  { $$ = code_generator_instance->makeCondition()->greater($1, $3); }
|   value LE value                                  { $$ = code_generator_instance->makeCondition()->lessOrEqual($1, $3); }
|   value GE value                                  { $$ = code_generator_instance->makeCondition()->greaterOrEqual($1, $3); }
;


value:
    INT                                             { $$ = var_map_instance->getNumberAsVariable($1); }
    |   identifier
;

identifier:
    PIDENTIFIER                                     { $$ = var_map_instance->getVariable(*$1); }
;

%%

void yyerror(std::string error) {
    printf("%s\n", error.c_str());
    exit(1);
}


int main(int argc, char **argv)
{
    if (argc < 3) {
        printf("Not enough parameters input!");
        exit(-1);
    }
    FILE* input;
    std::ofstream output = std::ofstream(argv[2]);
    input = fopen(argv[1], "r");

    var_map_instance = new var_map();
    code_generator_instance = new code_generator(var_map_instance);

    yyin = input;

    try {
        yyparse();
    } catch (std::string error) {
        yyerror(error);
    }

    std::string code = code_generator_instance->getCode();
    // std::cout << code;
    output << code;

    return 0;
}

